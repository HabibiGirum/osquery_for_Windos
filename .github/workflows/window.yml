name: build_windows

on:
  push:
    branches:
      - main
# env:
#   PACKAGING_REPO: https://github.com/osquery/osquery-packaging
#   PACKAGING_COMMIT: 4caa2c54f0d893c1efa47932571046bbce156c52
#   SUBMODULER_CACHE_VERSION: 2

jobs:
  build_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        bitness: [64, arm64]
        os: [windows-2019]

    steps:
      - name: Setup the build paths
        shell: powershell
        id: build_paths
        run: |
          $rel_src_path = "w\src"
          $rel_build_path = "w\build"
          $rel_sccache_path = "w\sccache"
          $rel_downloads_path = "w\downloads"
          $rel_install_path = "w\install"
          $rel_packaging_data_path = "w\packaging_data"
          $rel_packaging_path = "w\osquery-packaging"

          New-Item -ItemType Directory -Force -Path $rel_build_path
          New-Item -ItemType Directory -Force -Path $rel_sccache_path
          New-Item -ItemType Directory -Force -Path $rel_downloads_path
          New-Item -ItemType Directory -Force -Path $rel_install_path
          New-Item -ItemType Directory -Force -Path $rel_packaging_data_path


          $base_dir = (Get-Item .).FullName

          echo "SOURCE = $base_dir\$rel_src_path" >> $env.GITHUB_OUTPUT
          echo "REL_SOURCE=$rel_srch_path" >>$env:GITHUB_OUTPUT
          echo "BINARY=$base_dir\$rel_build_path" >>$env.GITHUB_OUTPUT
          echo "SCCACHE=$base_dir\$rel_sccache_path" >>$env.GITHUB_OUTPUT
          echo "DOWNLOADS=$base_dir\$rel_downloads_path" >> $env.GITHUB_OUTPUT
          echo "INSTALL=$base_dir\$rel_install_path" >> $env.GITHUB_OUTPUT
          echo "PACKAGING=$base_dir\$rel_packaging_path" >>$env.GITHUB_OUTPUT
          echo "PACKAGING_DATA=$base_dir\$rel_packaging_data_path" >>$env.GITHUB_OUTPUT

      - name: setup the VC arch
        shell: powershell
        id: vc_arch
        run: |
          $arch = switch ("${{ matrix.bitness }}")
          {
              "64" { "x64" }
              "arm64" { "x64_arm64" }
          }

          echo "VC_ARCH=$arch" >>$env.GITHUB_OUTPUT

      - name: configure git
        run: |
          git config --global core.autocrlf false
          git config --global core.symblinks true 
      - name: clone the osquery repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}

          
      - name: Detect the osquery version
        shell: powershell
        id: osquery_version
        run: |
          cd ${{ steps.build_paths.outputs.SOURCE }}
          $osquery_version = $(git describe --tags --abbrev=0)
      
          echo "VALUE=$osquery_version" >> $env.GITHUB_OUTPUT


          
          
