name: build_windows

on:
  push:
    branches:
      - main
env:
  PACKAGING_REPO: https://github.com/osquery/osquery-packaging
  PACKAGING_COMMIT: 4caa2c54f0d893c1efa47932571046bbce156c52
  SUBMODULER_CACHE_VERSION: 2

jobs:
  build_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        bitness: [64, arm64]
        os: [windows-2019]

    steps:
      - name: Setup the build paths
        shell: powershell
        id: build_paths
        run: |
          $rel_src_path = "w\src"
          $rel_build_path = "w\build"
          $rel_sccache_path = "w\sccache"
          $rel_downloads_path = "w\downloads"
          $rel_install_path = "w\install"
          $rel_package_data_path = "w\package_data"
          $rel_packaging_path = "w\osquery-packaging"
  
          New-Item -ItemType Directory -Force -Path $rel_build_path
          New-Item -ItemType Directory -Force -Path $rel_sccache_path
          New-Item -ItemType Directory -Force -Path $rel_downloads_path
          New-Item -ItemType Directory -Force -Path $rel_install_path
          New-Item -ItemType Directory -Force -Path $rel_package_data_path
  
          $base_dir = (Get-Item .).FullName
  
          echo "SOURCE=$base_dir\$rel_src_path" >> $env:GITHUB_OUTPUT
          echo "REL_SOURCE=$rel_src_path" >> $env:GITHUB_OUTPUT
          echo "BINARY=$base_dir\$rel_build_path" >> $env:GITHUB_OUTPUT
          echo "SCCACHE=$base_dir\$rel_sccache_path" >> $env:GITHUB_OUTPUT
          echo "DOWNLOADS=$base_dir\$rel_downloads_path" >> $env:GITHUB_OUTPUT
          echo "INSTALL=$base_dir\$rel_install_path" >> $env:GITHUB_OUTPUT
          echo "PACKAGING=$base_dir\$rel_packaging_path" >> $env:GITHUB_OUTPUT
          echo "PACKAGE_DATA=$base_dir\$rel_package_data_path" >> $env:GITHUB_OUTPUT
          
      - name: setup the VC arch
        shell: powershell
        id: vc_arch
        run: |
          $arch = switch ("${{ matrix.bitness }}")
          {
              "64" { "x64" }
              "arm64" { "x64_arm64" }
          }

          echo "VC_ARCH=$arch" >>$env.GITHUB_OUTPUT

      - name: configure git
        run: |
          git config --global core.autocrlf false
          git config --global core.symblinks true 
      - name: clone the osquery repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}

          
      # - name: Detect the osquery version
      #   shell: powershell
      #   id: osquery_version
      #   run: |
      #     cd ${{ steps.build_paths.outputs.SOURCE }}
      #     $osquery_version=$(git describe --tags --abbrev=0)
  
      #     echo "VALUE=$osquery_version" >> $env:GITHUB_OUTPUT
  
      - name: Clone the osquery-packaging repository
        run: |
          cd w
          git clone ${{ env.PACKAGING_REPO }}
          cd ${{ steps.build_paths.outputs.PACKAGING }}
          git checkout ${{ env.PACKAGING_COMMIT }}
  
      - name: Update the cache (git submodules)
        uses: actions/cache@v3
        with:
          path: ${{ steps.build_paths.outputs.SOURCE }}\.git\modules
  
          key: |
            gitmodules_${{ matrix.os }}_${{env.SUBMODULE_CACHE_VERSION}}_${{ github.sha }}
  
          restore-keys: |
            gitmodules_${{ matrix.os }}_${{env.SUBMODULE_CACHE_VERSION}}
  
      - name: Update the cache (downloads)
        uses: actions/cache@v3
        with:
          path: ${{ steps.build_paths.outputs.DOWNLOADS }}
  
          key: |
            downloads_${{ matrix.os }}_${{ github.sha }}
  
          restore-keys: |
            downloads_${{ matrix.os }}
          

      - name: Initialize the Python 3 installation
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: "x64"
  
      # The runners will likely have both the x86 and x64 versions of
      # Python but we always need the 64-bit one regardless of which
      # architecture we are building for.
      #
      # The setup-python action should have put the right Python version
      # in the PATH variable for us, so locate the installation directory
      # so we can use it as a hint when we configure the project with
      # CMake
      - name: Locate the Python root directory
        id: python_root_directory
        shell: powershell
        run: |
          $python_executable_path = $(Get-Command python.exe | Select-Object -ExpandProperty Definition)
          $python_root_directory = (Get-Item $python_executable_path).Directory.FullName
  
          echo "VALUE=$python_root_directory" >> $env:GITHUB_OUTPUT
  
      # Install the Python dependencies needed for our testing framework
      - name: Install tests prerequisites
        run: |
          python -m pip install --upgrade pip
  
          python -m pip install wheel `
                                setuptools `
                                psutil `
                                timeout_decorator `
                                thrift==0.11.0 `
                                osquery `
                                pywin32

      - name: clone osquery
        working-directory: ${{ steps.build_paths.outputs.SOURCE }}
        shell: powershell
        run: |
          git clone https://github.com/osquery/osquery.git
          
      - name: Install Strawberry Perl
        working-directory: ${{ steps.build_paths.outputs.SOURCE }}
        shell: powershell
        run: |
          osquery\tools\ci\scripts\install_openssl_formula_dependencies.ps1

      # TODO: Implement a cache so we don't keep hitting the server at each run
      - name: Install CMake
        working-directory: ${{ steps.build_paths.outputs.DOWNLOADS }}
        shell: powershell
        run: |
          $long_cmake_ver = "3.21.4"
          $short_cmake_ver = $($long_cmake_ver.split(".")[0] + "." + $long_cmake_ver.split(".")[1])
  
          $folder_name = $("cmake-" + $long_cmake_ver + "-windows-x86_64")
          $archive_name = $($folder_name + ".zip")
  
          $url = $("https://cmake.org/files/v" + $short_cmake_ver + "/" + $archive_name)
  
          (New-Object System.Net.WebClient).DownloadFile($url, $archive_name)
          7z x -o${{ steps.build_paths.outputs.INSTALL }} -y $archive_name
  
          echo "${{ steps.build_paths.outputs.INSTALL }}\$folder_name\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          
